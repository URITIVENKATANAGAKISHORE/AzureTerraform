# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
 
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: '1.0.8'
      
  - task: TerraformCLI@0
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/AppServiceSQLDB'
      backendType: 'azurerm'
      backendServiceArm: 'TerraformAzureConnection'
      ensureBackend: true
      backendAzureRmResourceGroupName: 'infrastructure-rg'
      backendAzureRmResourceGroupLocation: 'East US'
      backendAzureRmStorageAccountName: 'infraterraformstorage'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: 'dev-tfstate'
      allowTelemetryCollection: false

  - task: PowerShell@2
    displayName: Detect any terraform change
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/AppServiceSQLDB'
      targetType: 'inline'
      script: |
        # Write-Host "LASTEXITCODE : $LASTEXITCODE"
        $plan = $(terraform show -json tfplan | ConvertFrom-Json)
        $actions = $plan.resource_changes.change.actions
        Write-Host "Terraform actions : $actions"
        if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
        { 
          Write-Host "Terraform will perform the following actions : $actions"
          Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
        }
        else
        {
          Write-Host "There is no change detected in Terraform tfplan file"
        }
